//! DPRun is a utility application for starting DirectPlay lobbyable applications. This crate wraps
//! it in a Rust API!
//!
//! On Linux, this crate uses Wine to start dprun.
//!
//! The DPRun executable must be available separately.

mod inspect;
mod server;
pub mod structs;

use crate::server::HostServer;
use async_process::{Command, Stdio};
use async_std::io::{self, BufReader};
use async_std::prelude::*;
use std::path::PathBuf;

pub use crate::server::{AppController, ServiceProvider};
pub use crate::structs::DPID;
pub use uuid::Uuid as GUID;

// TODO move these to consts again when parse_str is const fn
lazy_static::lazy_static! {
    /// The GUID of the DPRun Service Provider.
    static ref GUID_DPRUNSP: GUID = GUID::parse_str("B1ED2367-609B-4C5C-8755-D2A29BB9A554").unwrap();
    /// The GUID of the DirectPlay address type containing a port number.
    static ref GUID_INETPORT: GUID = GUID::parse_str("E4524541-8EA5-11D1-8A96-006097B01411").unwrap();
}

/// The type of DirectPlay session to create; either joining or hosting a session.
#[derive(Debug, Clone, Copy)]
enum SessionType {
    /// Host a DirectPlay session. Optionally specify a GUID for the session; if none is given, a
    /// random one is generated by DPRun.
    Host(Option<GUID>),
    /// Join a DirectPlay session.
    Join(GUID),
}

/// A GUID identifying some DirectPlay related object. dprun supports some named aliases for common
/// GUIDs.
#[derive(Debug, Clone, PartialEq, Eq)]
enum DPGUIDOrNamed {
    /// Any GUID.
    GUID(GUID),
    /// One of the named GUID aliases supported by DPRun.
    Named(String),
}

impl DPGUIDOrNamed {
    /// Turn this GUID or name into a string that can be passed to the dprun CLI.
    ///
    /// Like `to_string()` but does not allocate for the named case.
    fn into_string(self) -> String {
        match self {
            DPGUIDOrNamed::GUID(guid) => to_braced(&guid),
            DPGUIDOrNamed::Named(string) => string,
        }
    }
}

impl ToString for DPGUIDOrNamed {
    fn to_string(&self) -> String {
        match self {
            DPGUIDOrNamed::GUID(guid) => to_braced(&guid),
            DPGUIDOrNamed::Named(string) => string.clone(),
        }
    }
}

impl From<GUID> for DPGUIDOrNamed {
    fn from(guid: GUID) -> Self {
        DPGUIDOrNamed::GUID(guid)
    }
}

impl From<String> for DPGUIDOrNamed {
    fn from(string: String) -> Self {
        DPGUIDOrNamed::Named(string)
    }
}

impl From<&str> for DPGUIDOrNamed {
    fn from(string: &str) -> Self {
        DPGUIDOrNamed::Named(string.to_string())
    }
}

/// Represents a DirectPlay address value. DirectPlay stores all address parts
/// as memory pointers, but the dprun CLI supports some typed arguments.
#[derive(Debug, Clone)]
pub enum DPAddressValue {
    /// A DirectPlay address part with a numeric value.
    Number(i32),
    /// A DirectPlay address part with a string value.
    String(String),
    /// A DirectPlay address part with a binary value.
    Binary(Vec<u8>),
}

impl From<i32> for DPAddressValue {
    fn from(number: i32) -> Self {
        DPAddressValue::Number(number)
    }
}

impl From<String> for DPAddressValue {
    fn from(string: String) -> Self {
        DPAddressValue::String(string)
    }
}

impl From<&str> for DPAddressValue {
    fn from(string: &str) -> Self {
        DPAddressValue::String(string.to_string())
    }
}

impl From<Vec<u8>> for DPAddressValue {
    fn from(bytes: Vec<u8>) -> Self {
        DPAddressValue::Binary(bytes)
    }
}

impl From<&[u8]> for DPAddressValue {
    fn from(bytes: &[u8]) -> Self {
        DPAddressValue::Binary(bytes.to_vec())
    }
}

/// Represents a part of a DirectPlay address, akin to DPCOMPOUNDADDRESSELEMENT in the DirectPlay
/// C API. Each address part has a data type and a value.
#[derive(Debug, Clone)]
struct DPAddressPart {
    /// The data type.
    data_type: DPGUIDOrNamed,
    /// The value of this address. These are untyped in DirectPlay. If you need something other
    /// than i32 or String, put raw bytes in DPAddressValue::Binary.
    value: DPAddressValue,
}

/// Create a DPRunOptions struct instance.
#[derive(Default)]
pub struct DPRunOptionsBuilder {
    session_type: Option<SessionType>,
    player_name: Option<String>,
    service_provider: Option<DPGUIDOrNamed>,
    service_provider_handler: Option<Box<dyn ServiceProvider>>,
    application: Option<GUID>,
    address: Vec<DPAddressPart>,
    session_name: Option<String>,
    session_password: Option<String>,
    cwd: Option<PathBuf>,
}

/// Holds options for running DPRun. DPRunOptions instances can be created using
/// DPRunOptions::builder().
pub struct DPRunOptions {
    session_type: SessionType,
    player_name: String,
    service_provider: DPGUIDOrNamed,
    service_provider_handler: Option<Box<dyn ServiceProvider>>,
    application: GUID,
    address: Vec<DPAddressPart>,
    session_name: Option<String>,
    session_password: Option<String>,
    cwd: Option<PathBuf>,
}

impl DPRunOptions {
    /// Create options for dprun.
    pub fn builder() -> DPRunOptionsBuilder {
        DPRunOptionsBuilder::default()
    }
}

impl DPRunOptionsBuilder {
    /// Host a DirectPlay session. Optionally specify a GUID for the session; if none is given, a
    /// random one is generated by DPRun.
    pub fn host(self, session_id: Option<GUID>) -> Self {
        Self {
            session_type: Some(SessionType::Host(session_id)),
            ..self
        }
    }

    /// Join a session.
    pub fn join(self, session_id: GUID) -> Self {
        Self {
            session_type: Some(SessionType::Join(session_id)),
            ..self
        }
    }

    /// Set the in-game name of the local player.
    pub fn player_name(self, player_name: String) -> Self {
        Self {
            player_name: Some(player_name),
            ..self
        }
    }

    /// Set the service provider to use.
    pub fn service_provider(self, service_provider: GUID) -> Self {
        Self {
            service_provider: Some(service_provider.into()),
            ..self
        }
    }

    /// Set the service provider to use, by name.
    pub fn named_service_provider(self, service_provider: &str) -> Self {
        Self {
            service_provider: Some(service_provider.into()),
            ..self
        }
    }

    /// Set a service provider handler. A service provider handler is used for relaying the
    /// DirectPlay messages generated by the application.
    ///
    /// This automatically enables the DPRUN service provider if it's not enabled already.
    pub fn service_provider_handler(mut self, service_provider: Box<dyn ServiceProvider>) -> Self {
        if self.service_provider.is_none() {
            self = self.named_service_provider("DPRUN");
        }
        self.service_provider_handler = Some(service_provider);
        self
    }

    /// Set the application to start.
    pub fn application(self, application: GUID) -> Self {
        Self {
            application: Some(application),
            ..self
        }
    }

    /// Set the name of the session (optional).
    pub fn session_name(self, session_name: String) -> Self {
        Self {
            session_name: Some(session_name),
            ..self
        }
    }

    /// Password protect the session (optional).
    pub fn session_password(self, session_password: String) -> Self {
        Self {
            session_password: Some(session_password),
            ..self
        }
    }

    /// Set the directory dprun is in (optional, defaults to current working directory).
    pub fn cwd(self, cwd: PathBuf) -> Self {
        Self {
            cwd: Some(cwd),
            ..self
        }
    }

    /// Add an address part.
    pub fn address_part(mut self, data_type: GUID, value: impl Into<DPAddressValue>) -> Self {
        self.address.push(DPAddressPart {
            data_type: data_type.into(),
            value: value.into(),
        });
        self
    }

    /// Add an address part.
    pub fn named_address_part(mut self, data_type: &str, value: impl Into<DPAddressValue>) -> Self {
        self.address.push(DPAddressPart {
            data_type: data_type.into(),
            value: value.into(),
        });
        self
    }

    /// Check the options and build the DPRunOptions struct.
    pub fn finish(self) -> DPRunOptions {
        let session_type = self.session_type.expect("must set a session type");
        let player_name = self.player_name.expect("must set a player name");
        let service_provider = self.service_provider.expect("must set a service provider");
        let application = self
            .application
            .expect("must set an application GUID to run");
        if service_provider == DPGUIDOrNamed::GUID(*GUID_DPRUNSP)
            || service_provider == DPGUIDOrNamed::Named("DPRUN".to_string())
        {
            assert!(
                self.service_provider_handler.is_some(),
                "must register a service provider handler to use the DPRun service provider",
            );
        }

        DPRunOptions {
            session_type,
            player_name,
            service_provider,
            service_provider_handler: self.service_provider_handler,
            application,
            address: self.address,
            session_name: self.session_name,
            session_password: self.session_password,
            cwd: self.cwd,
        }
    }
}

/// Represents a dprun game session.
pub struct DPRun {
    command: Command,
    host_server_port: Option<u16>,
    service_provider: Option<Box<dyn ServiceProvider>>,
}

impl DPRun {
    /// Get the command that will be executed (for debugging).
    pub fn command(&self) -> String {
        format!("{:?}", self.command)
    }

    /// Start a game without the host server for the DPRun Service Provider.
    async fn start_without_server(mut self) -> Result<(), io::Error> {
        let status = self.command.status().await?;
        if status.success() {
            Ok(())
        } else {
            Err(io::Error::new(
                io::ErrorKind::Other,
                format!("dprun exited with status {}", status.code().unwrap_or(0)),
            ))
        }
    }

    /// Start a game that uses the host server for the DPRun Service Provider.
    async fn start_with_server(self) -> Result<(), io::Error> {
        let server = HostServer::new(
            self.host_server_port.unwrap_or(2197),
            self.service_provider.unwrap(),
        );

        let (server, mut controller) = server.start().await?;
        let mut command = self.command;
        let mut child = command
            .stdout(Stdio::piped())
            .stderr(Stdio::piped())
            .spawn()?;

        let command_future = async move {
            let mut result = Ok(());

            let mut stdout = BufReader::new(child.stdout.as_mut().unwrap()).lines();
            let mut stderr = BufReader::new(child.stderr.as_mut().unwrap()).lines();

            futures::join!(
                async move {
                    while let Some(Ok(line)) = stdout.next().await {
                        log::trace!("out {}", line);
                    }
                },
                async move {
                    while let Some(Ok(line)) = stderr.next().await {
                        log::trace!("err {}", line);
                    }
                }
            );

            let status = child.status().await?;
            if status.success() {
                result = Err(io::Error::new(
                    io::ErrorKind::Other,
                    format!("dprun exited with status {}", status.code().unwrap_or(0)),
                ));
            }

            controller.stop().await;

            result
        };

        let (_, result) = futures::future::join(server, command_future).await;
        result
    }

    /// Start dprun.
    pub async fn start(self) -> Result<(), io::Error> {
        match self.service_provider {
            Some(_) => self.start_with_server().await,
            None => self.start_without_server().await,
        }
    }
}

fn to_braced(guid: &GUID) -> String {
    let res = &mut [0u8; 38];
    res[0] = b'{';
    res[37] = b'}';
    guid.to_hyphenated().encode_upper(&mut res[1..=36]);
    String::from_utf8_lossy(res).to_string()
}

/// Run a game using DPRun. The options can be created using DPRunOptions::builder().
pub fn run(options: DPRunOptions) -> DPRun {
    let mut command = if cfg!(target_os = "windows") {
        Command::new("dprun.exe")
    } else {
        let mut wine = Command::new("wine");
        wine.arg("dprun.exe");
        wine
    };

    if let Some(cwd) = options.cwd {
        command.current_dir(cwd);
    }

    match options.session_type {
        SessionType::Host(Some(guid)) => command.args(&["--host", &to_braced(&guid)]),
        SessionType::Host(None) => command.arg("--host"),
        SessionType::Join(guid) => command.args(&["--join", &to_braced(&guid)]),
    };

    let service_provider = options.service_provider_handler;

    let host_server_port = if service_provider.is_some() {
        options
            .address
            .iter()
            .find(|part| {
                part.data_type == DPGUIDOrNamed::GUID(*GUID_INETPORT)
                    || part.data_type == DPGUIDOrNamed::Named("INetPort".to_string())
            })
            .map(|part| {
                if let DPAddressValue::Number(val) = part.value {
                    val as u16
                } else {
                    2197
                }
            })
    } else {
        None
    };

    command.args(&[
        "--player",
        &options.player_name,
        "--service-provider",
        &options.service_provider.into_string(),
        "--application",
        &to_braced(&options.application),
    ]);

    for part in options.address {
        let key = part.data_type.into_string();
        let value = match part.value {
            DPAddressValue::Number(val) => format!("i:{}", val),
            DPAddressValue::String(val) => val,
            DPAddressValue::Binary(val) => format!(
                "b:{}",
                val.iter().map(|c| format!("{:02x}", c)).collect::<String>()
            ),
        };
        command.args(&["--address", &format!("{}={}", key, value)]);
    }

    if let Some(name) = options.session_name {
        command.args(&["--session-name", &name]);
    }

    if let Some(password) = options.session_password {
        command.args(&["--session-password", &password]);
    }

    DPRun {
        command,
        host_server_port,
        service_provider,
    }
}

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
