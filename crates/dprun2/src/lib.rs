//! DPRun is a utility application for starting DirectPlay lobbyable applications. This crate wraps
//! it in a Rust API!
//!
//! On Linux, this crate uses Wine to start dprun.
//!
//! The DPRun executable must be available separately.

use async_std::task::spawn_blocking;
use std::io;
use std::path::PathBuf;
use std::process::Command;
pub use uuid::Uuid as GUID;

// TODO move these to consts again when uuid has const fns
lazy_static::lazy_static! {
    /// The GUID of the DPRun Service Provider.
    static ref GUID_DPRUNSP: GUID = GUID::parse_str("B1ED2367-609B-4C5C-8755-D2A29BB9A554").unwrap();
    /// The GUID of the DirectPlay address type containing a port number.
    static ref GUID_INETPORT: GUID = GUID::parse_str("E4524541-8EA5-11D1-8A96-006097B01411").unwrap();
}

/// The type of DirectPlay session to create; either joining or hosting a session.
#[derive(Debug, Clone, Copy)]
enum SessionType {
    /// Host a DirectPlay session. Optionally specify a GUID for the session; if none is given, a
    /// random one is generated by DPRun.
    Host(Option<GUID>),
    /// Join a DirectPlay session.
    Join(GUID),
}

/// A GUID identifying some DirectPlay related object. dprun supports some named aliases for common
/// GUIDs.
#[derive(Debug, Clone, PartialEq, Eq)]
enum DPGUIDOrNamed {
    /// Any GUID.
    GUID(GUID),
    /// One of the named GUID aliases supported by DPRun.
    Named(String),
}

impl DPGUIDOrNamed {
    /// Turn this GUID or name into a string that can be passed to the dprun CLI.
    fn into_string(self) -> String {
        match self {
            DPGUIDOrNamed::GUID(guid) => to_braced(&guid),
            DPGUIDOrNamed::Named(string) => string,
        }
    }
}

/// Represents a DirectPlay address value. DirectPlay stores all address parts
/// as memory pointers, but the dprun CLI supports some typed arguments.
#[derive(Debug, Clone)]
pub enum DPAddressValue {
    /// A DirectPlay address part with a numeric value.
    Number(i32),
    /// A DirectPlay address part with a string value.
    String(String),
    /// A DirectPlay address part with a binary value.
    Binary(Vec<u8>),
}

/// Represents a part of a DirectPlay address, akin to DPCOMPOUNDADDRESSELEMENT in the DirectPlay
/// C API. Each address part has a data type and a value.
#[derive(Debug, Clone)]
struct DPAddressPart {
    /// The data type.
    data_type: DPGUIDOrNamed,
    /// The value of this address. These are untyped in DirectPlay. If you need something other
    /// than i32 or String, put raw bytes in DPAddressValue::Binary.
    value: DPAddressValue,
}

/// Create a DPRunOptions struct instance.
#[derive(Debug, Default)]
pub struct DPRunOptionsBuilder {
    session_type: Option<SessionType>,
    player_name: Option<String>,
    service_provider: Option<DPGUIDOrNamed>,
    // service_provider_handler: Option<Box<dyn ServiceProvider>>,
    application: Option<GUID>,
    address: Vec<DPAddressPart>,
    session_name: Option<String>,
    session_password: Option<String>,
    cwd: Option<PathBuf>,
}

/// Holds options for running DPRun. DPRunOptions instances can be created using
/// DPRunOptions::builder().
#[derive(Debug, Clone)]
pub struct DPRunOptions {
    session_type: SessionType,
    player_name: String,
    service_provider: DPGUIDOrNamed,
    // service_provider_handler: Option<Box<dyn ServiceProvider>>,
    application: GUID,
    address: Vec<DPAddressPart>,
    session_name: Option<String>,
    session_password: Option<String>,
    cwd: Option<PathBuf>,
}

impl DPRunOptions {
    /// Create options for dprun.
    pub fn builder() -> DPRunOptionsBuilder {
        DPRunOptionsBuilder::default()
    }
}

impl DPRunOptionsBuilder {
    /// Host a DirectPlay session. Optionally specify a GUID for the session; if none is given, a
    /// random one is generated by DPRun.
    pub fn host(self, session_id: Option<GUID>) -> Self {
        Self {
            session_type: Some(SessionType::Host(session_id)),
            ..self
        }
    }

    /// Join a session.
    pub fn join(self, session_id: GUID) -> Self {
        Self {
            session_type: Some(SessionType::Join(session_id)),
            ..self
        }
    }

    /// Set the in-game name of the local player.
    pub fn player_name(self, player_name: String) -> Self {
        Self {
            player_name: Some(player_name),
            ..self
        }
    }

    /// Set the service provider to use.
    pub fn service_provider(self, service_provider: GUID) -> Self {
        Self {
            service_provider: Some(DPGUIDOrNamed::GUID(service_provider)),
            ..self
        }
    }

    /// Set the service provider to use, by name.
    pub fn named_service_provider(self, service_provider: &str) -> Self {
        Self {
            service_provider: Some(DPGUIDOrNamed::Named(service_provider.to_string())),
            ..self
        }
    }

    /*
    /// Set a service provider handler. A service provider handler is used for relaying the
    /// DirectPlay messages generated by the application.
    ///
    /// This automatically enables the DPRUN service provider if it's not enabled already.
    pub fn service_provider_handler(mut self, service_provider: Box<dyn ServiceProvider>) -> Self {
        if self.service_provider.is_none() {
            self = self.named_service_provider("DPRUN");
        }
        self.service_provider_handler = Some(service_provider);
        self
    }
    */

    /// Set the application to start.
    pub fn application(self, application: GUID) -> Self {
        Self {
            application: Some(application),
            ..self
        }
    }

    /// Set the name of the session (optional).
    pub fn session_name(self, session_name: String) -> Self {
        Self {
            session_name: Some(session_name),
            ..self
        }
    }

    /// Password protect the session (optional).
    pub fn session_password(self, session_password: String) -> Self {
        Self {
            session_password: Some(session_password),
            ..self
        }
    }

    /// Set the directory dprun is in (optional, defaults to current working directory).
    pub fn cwd(self, cwd: PathBuf) -> Self {
        Self {
            cwd: Some(cwd),
            ..self
        }
    }

    /// Add an address part.
    pub fn address_part(mut self, data_type: GUID, value: DPAddressValue) -> Self {
        self.address.push(DPAddressPart {
            data_type: DPGUIDOrNamed::GUID(data_type),
            value,
        });
        self
    }

    /// Add an address part.
    pub fn named_address_part(mut self, data_type: &str, value: DPAddressValue) -> Self {
        self.address.push(DPAddressPart {
            data_type: DPGUIDOrNamed::Named(data_type.to_string()),
            value,
        });
        self
    }

    /// Check the options and build the DPRunOptions struct.
    pub fn finish(self) -> DPRunOptions {
        assert!(self.session_type.is_some());
        assert!(self.player_name.is_some());
        assert!(self.service_provider.is_some());
        assert!(self.application.is_some());

        if self.service_provider == Some(DPGUIDOrNamed::GUID(*GUID_DPRUNSP))
            || self.service_provider == Some(DPGUIDOrNamed::Named("DPRUN".to_string()))
        {
            assert!(
                false,
                "Must register a service provider handler to use the DPRun service provider."
            );
        }

        DPRunOptions {
            session_type: self.session_type.unwrap(),
            player_name: self.player_name.unwrap(),
            service_provider: self.service_provider.unwrap(),
            // service_provider_handler: self.service_provider_handler,
            application: self.application.unwrap(),
            address: self.address,
            session_name: self.session_name,
            session_password: self.session_password,
            cwd: self.cwd,
        }
    }
}

/// Represents a dprun game session.
pub struct DPRun {
    command: Command,
    host_server_port: Option<u16>,
    // service_provider: Option<Box<dyn ServiceProvider>>,
}

impl DPRun {
    /// Get the command that will be executed (for debugging).
    pub fn command(&self) -> String {
        format!("{:?}", self.command)
    }

    /// Start a game without the host server for the DPRun Service Provider.
    async fn start_without_server(mut self) -> Result<(), io::Error> {
        spawn_blocking(move || self.command.spawn()).await?;
        Ok(())
    }

    /// Start a game that uses the host server for the DPRun Service Provider.
    async fn start_with_server(mut self) -> Result<(), io::Error> {
        unimplemented!()
    }

    /// Start dprun.
    pub async fn start(self) -> Result<(), io::Error> {
        self.start_without_server().await
    }
}

fn to_braced(GUID: &GUID) -> String {
    let res = &mut [0u8; 38];
    res[0] = b'{';
    res[37] = b'}';
    GUID.to_hyphenated().encode_upper(&mut res[1..=36]);
    String::from_utf8_lossy(res).to_string()
}

/// Run a game using DPRun. The options can be created using DPRunOptions::builder().
pub fn run(options: DPRunOptions) -> DPRun {
    let mut command = if cfg!(target_os = "windows") {
        Command::new("dprun.exe")
    } else {
        let mut wine = Command::new("wine");
        wine.arg("dprun.exe");
        wine
    };

    if let Some(cwd) = options.cwd {
        command.current_dir(cwd);
    }

    match options.session_type {
        SessionType::Host(Some(guid)) => command.args(&["--host", &to_braced(&guid)]),
        SessionType::Host(None) => command.arg("--host"),
        SessionType::Join(guid) => command.args(&["--join", &to_braced(&guid)]),
    };

    let service_provider = None::<Option<()>>;

    let host_server_port = if service_provider.is_some() {
        options
            .address
            .iter()
            .find(|part| {
                part.data_type == DPGUIDOrNamed::GUID(*GUID_INETPORT)
                    || part.data_type == DPGUIDOrNamed::Named("INetPort".to_string())
            })
            .and_then(|part| {
                if let DPAddressValue::Number(val) = part.value {
                    Some(val as u16)
                } else {
                    Some(2197)
                }
            })
    } else {
        None
    };

    command.args(&[
        "--player",
        &options.player_name,
        "--service-provider",
        &options.service_provider.into_string(),
        "--application",
        &to_braced(&options.application),
    ]);

    for part in options.address {
        let key = part.data_type.into_string();
        let value = match part.value {
            DPAddressValue::Number(val) => format!("i:{}", val),
            DPAddressValue::String(val) => val,
            DPAddressValue::Binary(val) => format!(
                "b:{}",
                val.iter().map(|c| format!("{:02x}", c)).collect::<String>()
            ),
        };
        command.args(&["--address", &format!("{}={}", key, value)]);
    }

    if let Some(name) = options.session_name {
        command.args(&["--session-name", &name]);
    }

    if let Some(password) = options.session_password {
        command.args(&["--session-password", &password]);
    }

    DPRun {
        command,
        host_server_port,
        // service_provider,
    }
}

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
